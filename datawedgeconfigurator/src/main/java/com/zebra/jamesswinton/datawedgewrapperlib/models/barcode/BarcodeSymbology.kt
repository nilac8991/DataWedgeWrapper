package com.zebra.jamesswinton.datawedgewrapperlib.models.barcode

enum class BarcodeSymbology(val symbology: String = "") {
    AUSTRALIAN_POST("decoder_australian_postal"),
    AZTEC("decoder_aztec"),
    CANADIAN_POST("decoder_canadian_postal"),
    CHINESE_2_OF_5("decoder_chinese_2of5"),
    CODABAR("decoder_codabar"),
    CODE_11("decoder_code11"),
    CODE_32("decoder_code32"),
    CODE_39("decoder_code39"),
    CODE_93("decoder_code93"),
    CODE_128("decoder_code128"),
    COMPOSITE_AB("decoder_composite_ab"),
    COMPOSITE_C("decoder_composite_c"),
    DATAMATRIX("decoder_datamatrix"),
    SIGNATURE("decoder_signature"),
    DISCRETE_2_OF_5("decoder_d2of5"),
    DOTCODE("decoder_dotcode"),
    DUTCH_POSTAL("decoder_dutch_postal"),
    EAN_8("decoder_ean8"),
    EAN_13("decoder_ean13"),
    FINNISH_POSTAL_4S("decoder_finnish_postal_4s"),
    GRID_MATRIX("decoder_grid_matrix"),
    GS1_DATABAR("decoder_gs1_databar"),
    GS1_DATABAR_LIMITED("decoder_gs1_databar_lim"),
    GS1_DATABAR_EXPANDED("decoder_gs1_databar_exp"),
    GS1_DATAMATRIX("decoder_gs1_datamatrix"),
    GS1_QRCODE("decoder_gs1_qrcode"),
    HAN_XIN("decoder_hanxin"),
    INTERLEAVED_2_OF_5("decoder_i2of5"),
    JAPANESE_POSTAL("decoder_japanese_postal"),
    KOREAN_3_OF_5("decoder_korean_3of5"),
    MAILMARK("decoder_mailmark"),
    MATRIX_2_OF_5("decoder_matrix_2of5"),
    MAXICODE("decoder_maxicode"),
    MICR_E13B("decoder_micr_e13b"),
    MICRO_PDF("decoder_micropdf"),
    MICRO_QR("decoder_microqr"),
    MSI("decoder_msi"),
    OCR_A("decoder_ocr_a"),
    OCR_B("decoder_ocr_b"),
    PDF417("decoder_pdf417"),
    QRCODE("decoder_qrcode"),
    TLC_39("decoder_tlc39"),
    TRIOPTIC_39("decoder_trioptic39"),
    UK_POSTAL("decoder_uk_postal"),
    US_CURRENCY("decoder_us_currency"),
    US_PLANET("decoder_usplanet"),
    US_POSTAL("decoder_us_postal"),
    US_POSTNET("decoder_uspostnet"),
    UPC_A("decoder_upca"),
    UPCE_0("decoder_upce0"),
    UPCE_1("decoder_upce1"),
    US4STATE("decoder_us4state"),
    US4STATE_FICS("decoder_us4state_fics");

    companion object {
        fun forSymbology(symbology: String) = values().find { it.symbology == symbology }
    }
}